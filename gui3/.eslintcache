[{"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\index.tsx":"1","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\StateSettings.tsx":"2","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\MenuDrawer.tsx":"3","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\APIAccess\\NetworkAccess.ts":"4","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\MachinePage.tsx":"5","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\LoginPage.tsx":"6","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\CustomDataDisplayConfigurationPage.tsx":"7","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\TypeSelector.tsx":"8","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\ChannelSelector.tsx":"9","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\ChannelPage.tsx":"10","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSourceSelector.tsx":"11","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\SingleAlarmStateItem.ts":"12","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\AlarmLogEntryType.ts":"13","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSources.tsx":"14","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\GridOfAlarmStateItems.tsx":"15","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\AlarmSettings.tsx":"16","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DateRangeSelector.tsx":"17","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\AlarmSettingsTypes.ts":"18","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\SitePage.tsx":"19","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\SitesPage.tsx":"20","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSelection.tsx":"21","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\CustomDataView.tsx":"22","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\Graph.tsx":"23","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\App.tsx":"24","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\StatesGrid.tsx":"25","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\AlarmStateItem.tsx":"26","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\AlarmlogPage.tsx":"27","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\AddStatesForm.tsx":"28","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\OuterPage.tsx":"29"},{"size":176,"mtime":1611917394088,"results":"30","hashOfConfig":"31"},{"size":1895,"mtime":1614617351895,"results":"32","hashOfConfig":"31"},{"size":2112,"mtime":1613744699154,"results":"33","hashOfConfig":"31"},{"size":8228,"mtime":1614696691994,"results":"34","hashOfConfig":"31"},{"size":1329,"mtime":1614611337344,"results":"35","hashOfConfig":"31"},{"size":3642,"mtime":1614696678060,"results":"36","hashOfConfig":"31"},{"size":902,"mtime":1614009034332,"results":"37","hashOfConfig":"31"},{"size":807,"mtime":1613993600003,"results":"38","hashOfConfig":"31"},{"size":849,"mtime":1613993600017,"results":"39","hashOfConfig":"31"},{"size":1960,"mtime":1614008743430,"results":"40","hashOfConfig":"31"},{"size":1506,"mtime":1614009322214,"results":"41","hashOfConfig":"31"},{"size":179,"mtime":1611917394087,"results":"42","hashOfConfig":"31"},{"size":529,"mtime":1611917394086,"results":"43","hashOfConfig":"31"},{"size":2809,"mtime":1614009322206,"results":"44","hashOfConfig":"31"},{"size":818,"mtime":1614612791685,"results":"45","hashOfConfig":"31"},{"size":4181,"mtime":1612784324496,"results":"46","hashOfConfig":"31"},{"size":3684,"mtime":1614009322187,"results":"47","hashOfConfig":"31"},{"size":1015,"mtime":1611917394086,"results":"48","hashOfConfig":"31"},{"size":1028,"mtime":1614609168975,"results":"49","hashOfConfig":"31"},{"size":899,"mtime":1614612791664,"results":"50","hashOfConfig":"31"},{"size":2405,"mtime":1614009322223,"results":"51","hashOfConfig":"31"},{"size":2179,"mtime":1614093035026,"results":"52","hashOfConfig":"31"},{"size":7650,"mtime":1614096683057,"results":"53","hashOfConfig":"31"},{"size":1724,"mtime":1613744597085,"results":"54","hashOfConfig":"31"},{"size":1663,"mtime":1614614151501,"results":"55","hashOfConfig":"31"},{"size":1870,"mtime":1614612791553,"results":"56","hashOfConfig":"31"},{"size":1114,"mtime":1612784324509,"results":"57","hashOfConfig":"31"},{"size":1591,"mtime":1612784324529,"results":"58","hashOfConfig":"31"},{"size":1680,"mtime":1611917394082,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1vjj9t4",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"67"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\index.tsx",[],["123","124"],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\StateSettings.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\MenuDrawer.tsx",[],["125","126"],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\APIAccess\\NetworkAccess.ts",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\MachinePage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\LoginPage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\CustomDataDisplayConfigurationPage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\TypeSelector.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\ChannelSelector.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\ChannelPage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSourceSelector.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\SingleAlarmStateItem.ts",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\AlarmLogEntryType.ts",[],["127","128"],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSources.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\GridOfAlarmStateItems.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\AlarmSettings.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DateRangeSelector.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Types\\AlarmSettingsTypes.ts",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\SitePage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\SitesPage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\DataSelection.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\CustomDataView.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\Graph.tsx",["129"],"import React, {useEffect, useState} from 'react';\r\nimport {AreaSeries, FlexibleWidthXYPlot, Highlight, HighlightArea, HorizontalGridLines, LineSeries, LineSeriesPoint, VerticalGridLines, XAxis, YAxis} from 'react-vis'\r\nimport '../../node_modules/react-vis/dist/style.css';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {GraphSettings} from \"./GraphSettings\";\r\nimport {State} from \"../Types/StateTypes\";\r\nimport {NetworkAccess} from \"../APIAccess/NetworkAccess\";\r\n\r\nconst networkAccess = new NetworkAccess();\r\n\r\nconst fetchAlarmLevels = async (channel: number, type: number) => networkAccess.fetchAlarmChanges(channel, type, \"alarm\");\r\nconst fetchAlertLevels = async (channel: number, type: number) => networkAccess.fetchAlarmChanges(channel, type, \"alert\");\r\n\r\nconst fetchStatePeriods = async (channel: number) => {\r\n    const states = await networkAccess.networkFetchStatePeriods(channel);\r\n\r\n    const periods: Array<LineSeriesPoint[]> = states.map(state => {\r\n        return [\r\n            {x: (state.start_seconds_since_epoch * 1000) - 1, y: 0},\r\n            {x: (state.start_seconds_since_epoch * 1000), y: 1000000},\r\n            {x: (state.end_seconds_since_epoch * 1000), y: 1000000},\r\n            {x: (state.end_seconds_since_epoch * 1000) + 1, y: 0}\r\n        ]\r\n    });\r\n\r\n    return periods;\r\n}\r\n\r\ninterface PropsT {\r\n    channel: number,\r\n    type: number\r\n}\r\n\r\nconst Graph = (props: PropsT) => {\r\n    const [valuesData, setValuesData] = useState<LineSeriesPoint[]>([]);\r\n    const [currentArea, setCurrentArea] = useState<HighlightArea>({top: 100, bottom: -100, left: 0, right: new Date().getTime()}); // TODO: Set initials sensibly so we can cope with the initial lack of values\r\n    const [inZoomMode, setZoomMode] = useState(true);\r\n    const [states, setStates] = useState<State[]>([]);\r\n    const [statePeriods, setStatePeriods] = useState<LineSeriesPoint[][]>([]);\r\n    const [selectedState, setSelectedState] = useState<State | undefined>(undefined);\r\n    const [alarmLevels, setAlarmLevels] = useState<LineSeriesPoint[]>([]);\r\n    const [alertLevels, setAlertLevels] = useState<LineSeriesPoint[]>([]);\r\n\r\n    useEffect(() => {\r\n        networkAccess.fetchStates()\r\n            .then(fetchedStates => setStates(fetchedStates)); // TODO: Also pull the actual state periods themselves\r\n        networkAccess.fetchValueData(props.channel, props.type)\r\n            .then((result) => {\r\n                setValuesData(result);\r\n                displayFullRange(result);\r\n            });\r\n        fetchAlertLevels(props.channel, props.type)\r\n            .then((levels) => setAlertLevels(levels));\r\n        fetchAlarmLevels(props.channel, props.type)\r\n            .then((levels) => setAlarmLevels(levels));\r\n        fetchStatePeriods(props.channel)\r\n            .then(periods => setStatePeriods(periods));\r\n    }, []);\r\n\r\n    const handleStateSelection = (area: HighlightArea | null) => {\r\n        if (area === null || area.left === undefined || area.right === undefined || selectedState === undefined)\r\n            return;\r\n\r\n        const leftBound = (area.left as any).getTime(); // The documentation suggests this should come through as a number. It doesn't, it comes through as a date.\r\n        const rightBound = (area.right as any).getTime(); // The documentation suggests this should come through as a number. It doesn't, it comes through as a date.\r\n\r\n        const networkAccess = new NetworkAccess();\r\n        networkAccess.issueStateUpdate(leftBound, rightBound, selectedState.id)\r\n            .then(() => console.log(\"Pushed new state update\")); // TODO: Non-static machine address and error handling\r\n    }\r\n\r\n    function updateDragArea(area: HighlightArea | null) {\r\n        if (inZoomMode) {\r\n            if (area !== undefined && area !== null && currentArea !== undefined && setCurrentArea !== undefined) {\r\n                if (area.left !== undefined && area.right !== undefined && area.bottom !== undefined && area.top !== undefined) {\r\n                    const fullRange = getFullRange(valuesData);\r\n                    area.bottom = Math.max(area.bottom, fullRange.bottom);\r\n                    area.top = Math.min(area.top, fullRange.top);\r\n                    area.left = Math.max(area.left, fullRange.left);\r\n                    area.right = Math.min(area.right, fullRange.right);\r\n                }\r\n\r\n                setCurrentArea(area ?? {});\r\n            }\r\n        } else handleStateSelection(area);\r\n    }\r\n\r\n    const getFullRange = (points: LineSeriesPoint[]) => {\r\n        // TODO: This should take into the account the alarm and alert levels when calculating the maximum and minimum\r\n        // Not that, theoretically, the alarm or alert levels should ever be substantially higher that the real level\r\n        // given that they are being calculated as n sigma against the average level.\r\n\r\n        let min = Number.POSITIVE_INFINITY;\r\n        points.forEach(point => {\r\n            if (point.y < min)\r\n                min = point.y;\r\n        })\r\n\r\n        let max = Number.NEGATIVE_INFINITY;\r\n        points.forEach(point => {\r\n            if (point.y > max)\r\n                max = point.y;\r\n        }); // This is nasty and I resent javascript for making me to it. Try and find a better way later.\r\n\r\n        return {\r\n            left: points[0].x, right: points[points.length - 1].x,\r\n            bottom: min,\r\n            top: max\r\n        };\r\n    }\r\n\r\n    const displayFullRange = (points: LineSeriesPoint[]) => {\r\n        setCurrentArea(getFullRange(points));\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={9} md={9} xl={9} lg={9}>\r\n                <FlexibleWidthXYPlot xType={\"time\"}\r\n                                     height={200}\r\n                                     xDomain={\r\n                                         currentArea && [\r\n                                             currentArea.left,\r\n                                             currentArea.right\r\n                                         ]\r\n                                     }\r\n                                     yDomain={\r\n                                         currentArea && [\r\n                                             currentArea.bottom,\r\n                                             currentArea.top\r\n                                         ]\r\n                                     }>\r\n                    {\r\n                        statePeriods.map(period => (\r\n                            <AreaSeries data={period}/>\r\n                        ))\r\n                    }\r\n                    <HorizontalGridLines/>\r\n                    <VerticalGridLines/>\r\n                    <LineSeries data={valuesData} color=\"black\"/>\r\n                    <LineSeries data={alarmLevels} color=\"red\" strokeStyle=\"dashed\"/>\r\n                    <LineSeries data={alertLevels} color=\"yellow\" strokeStyle=\"dashed\"/>\r\n                    <XAxis tickLabelAngle={-90}/>\r\n                    <YAxis/>\r\n                    <Highlight drag={true} enableY={inZoomMode} onDragEnd={updateDragArea}/>\r\n                </FlexibleWidthXYPlot>\r\n            </Grid>\r\n            <Grid item xs={3} md={3} xl={3} lg={3}>\r\n                <GraphSettings currentZoomMode={inZoomMode}\r\n                               updateZoomMode={setZoomMode}\r\n                               resetZoom={() => displayFullRange(valuesData)}\r\n                               states={states}\r\n                               currentSelectedState={selectedState}\r\n                               setSelectedState={setSelectedState}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default Graph;\r\n","C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\App.tsx",[],["130","131"],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\StatesGrid.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\AlarmStateItem.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Pages\\AlarmlogPage.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\AddStatesForm.tsx",[],"C:\\unirepos\\unirepos\\COMP3000-Automatic-Vibration-Alarm-Adjustments\\gui3\\src\\Components\\OuterPage.tsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"132","replacedBy":"138"},{"ruleId":"134","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":58,"column":8,"nodeType":"142","endLine":58,"endColumn":10,"suggestions":"143"},{"ruleId":"132","replacedBy":"144"},{"ruleId":"134","replacedBy":"145"},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],["146"],["147"],["146"],["147"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'displayFullRange', 'props.channel', and 'props.type'. Either include them or remove the dependency array.","ArrayExpression",["148"],["146"],["147"],"no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},"Update the dependencies array to be: [displayFullRange, props.channel, props.type]",{"range":"151","text":"152"},[2828,2830],"[displayFullRange, props.channel, props.type]"]